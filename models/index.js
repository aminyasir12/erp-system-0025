const { Sequelize, DataTypes } = require('sequelize');
const config = require('../config/config');

// ุชุญุฏูุฏ ุงูุจูุฆุฉ (ุชุทููุฑุ ุงุฎุชุจุงุฑุ ุฅูุชุงุฌ)
// ุชุญุฏูุฏ ุจูุฆุฉ ุงูุชุดุบูู
const env = process.env.NODE_ENV || 'development';
const dbConfig = config[env];

if (!dbConfig) {
  console.error('โ ูู ูุชู ุงูุนุซูุฑ ุนูู ุฅุนุฏุงุฏุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช ููุจูุฆุฉ:', env);
  process.exit(1);
}

console.log('๐ ุฅุนุฏุงุฏุงุช ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช:');
console.log('- ุงูุจูุฆุฉ:', env);
console.log('- ุงููุถูู:', dbConfig.host);
console.log('- ุงููููุฐ:', dbConfig.port);
console.log('- ุงุณู ูุงุนุฏุฉ ุงูุจูุงูุงุช:', dbConfig.database);
console.log('- ุงุณู ุงููุณุชุฎุฏู:', dbConfig.username);
console.log('- ููุน ูุงุนุฏุฉ ุงูุจูุงูุงุช:', dbConfig.dialect);

// ุงูุชุญูู ูู ูุฌูุฏ ุฌููุน ุงูุฅุนุฏุงุฏุงุช ุงููุทููุจุฉ
const requiredConfig = ['host', 'port', 'database', 'username', 'password', 'dialect'];
const missingConfig = requiredConfig.filter(key => !dbConfig[key]);

if (missingConfig.length > 0) {
  console.error(`โ ุฅุนุฏุงุฏุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุงูุตุฉ: ${missingConfig.join(', ')}`);
  process.exit(1);
}

// ุฅูุดุงุก ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุน ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก
let sequelize;
try {
  console.log('๐ ุฌุงุฑู ุฅูุดุงุก ุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช...');
  
  sequelize = new Sequelize(
    dbConfig.database,
    dbConfig.username,
    dbConfig.password,
    {
      host: dbConfig.host,
      port: dbConfig.port || 5432,
      dialect: dbConfig.dialect || 'postgres',
      logging: (msg) => console.log(`[Sequelize] ${msg}`), // ุชูุนูู ุงูุชุณุฌูู
      define: {
        timestamps: true,
        underscored: true,
        createdAt: 'created_at',
        updatedAt: 'updated_at',
      },
      pool: {
        max: 5,
        min: 0,
        acquire: 30000,
        idle: 10000
      },
      retry: {
        max: 3, // ุนุฏุฏ ุงููุญุงููุงุช ุนูุฏ ูุดู ุงูุงุชุตุงู
        timeout: 30000 // ูููุฉ ูู ูุญุงููุฉ ุจุงููููู ุซุงููุฉ
      }
    }
  );
  
  console.log('โ ุชู ุฅูุดุงุก ุงุชุตุงู Sequelize ุจูุฌุงุญ');
} catch (error) {
  console.error('โ ูุดู ูู ุฅูุดุงุก ุงุชุตุงู Sequelize:', error.message);
  console.error('ุชูุงุตูู ุงูุฎุทุฃ:', error);
  process.exit(1);
}

const db = {
  sequelize,
  Sequelize,
  models: {}
};

// Import model initializers
const { User, initUser } = require('./User');
const { Category, initCategory } = require('./Category');
const { Product, initProduct } = require('./Product');
const { Inventory, initInventory } = require('./Inventory');
const { Customer, initCustomer } = require('./Customer');
const { Supplier, initSupplier } = require('./Supplier');
const { Purchase, initPurchase } = require('./Purchase');
const { Sale, initSale } = require('./Sale');
const { SaleItem, initSaleItem } = require('./SaleItem');
const { Payment, initPayment } = require('./Payment');

// ุชููุฆุฉ ุฌููุน ุงูููุงุฐุฌ ูุน ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก
const initializeModels = () => {
  try {
    console.log('ุฌุงุฑู ุชููุฆุฉ ุงูููุงุฐุฌ...');
    
    // ูุงุฆูุฉ ุจุฌููุน ุฏูุงู ุงูุชููุฆุฉ
    const initializers = [
      { name: 'User', init: initUser },
      { name: 'Category', init: initCategory },
      { name: 'Product', init: initProduct },
      { name: 'Inventory', init: initInventory },
      { name: 'Customer', init: initCustomer },
      { name: 'Supplier', init: initSupplier },
      { name: 'Purchase', init: initPurchase },
      { name: 'Sale', init: initSale },
      { name: 'SaleItem', init: initSaleItem },
      { name: 'Payment', init: initPayment }
    ];

    // ุชูููุฐ ูู ุฏุงูุฉ ุชููุฆุฉ
    initializers.forEach(({ name, init }) => {
      try {
        init(sequelize);
        console.log(`โ ุชู ุชููุฆุฉ ูููุฐุฌ ${name} ุจูุฌุงุญ`);
      } catch (error) {
        console.error(`โ ูุดู ูู ุชููุฆุฉ ูููุฐุฌ ${name}:`, error.message);
        throw error; // ุฅุนุงุฏุฉ ุฑูู ุงูุฎุทุฃ ูุฅููุงู ุงูุชููุฆุฉ
      }
    });
    
    console.log('ุชู ุชููุฆุฉ ุฌููุน ุงูููุงุฐุฌ ุจูุฌุงุญ');
  } catch (error) {
    console.error('ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชููุฆุฉ ุงูููุงุฐุฌ:', error);
    throw error;
  }
};

// ุงุณุชุฏุนุงุก ุฏุงูุฉ ุงูุชููุฆุฉ
initializeModels();

// Set up model relationships (associations)
Object.keys(sequelize.models).forEach(modelName => {
  if (sequelize.models[modelName].associate) {
    sequelize.models[modelName].associate(sequelize.models);
  }
  db[modelName] = sequelize.models[modelName];
  db.models[modelName] = sequelize.models[modelName];
});

// ูุฒุงููุฉ ุงูููุงุฐุฌ ูุน ูุงุนุฏุฉ ุงูุจูุงูุงุช
const syncModels = async (options = {}) => {
  const transaction = await sequelize.transaction();
  
  try {
    console.log('ุฌุงุฑู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช...');
    await sequelize.authenticate({ transaction });
    console.log('ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ');
    
    console.log('ุฌุงุฑู ูุฒุงููุฉ ุงูููุงุฐุฌ...');
    await sequelize.sync({
      force: false,       // ูุง ุชูู ุจุฅุณูุงุท ุงูุฌุฏุงูู ุงูููุฌูุฏุฉ
      alter: true,        // ูู ุจุชุญุฏูุซ ุงูุฌุฏุงูู ูุชุทุงุจู ุงูููุงุฐุฌ
      logging: console.log, // ุชูุนูู ุงูุชุณุฌูู
      transaction
    });
    
    await transaction.commit();
    console.log('โ ุชูุช ูุฒุงููุฉ ุงูููุงุฐุฌ ุจูุฌุงุญ');
    return true;
  } catch (error) {
    await transaction.rollback();
    console.error('โ ูุดู ูู ูุฒุงููุฉ ุงูููุงุฐุฌ:', error.message);
    console.error('ุชูุงุตูู ุงูุฎุทุฃ:', error);
    throw error; // ุฅุนุงุฏุฉ ุฑูู ุงูุฎุทุฃ ููุชุนุงูู ูุนู ูู ุงููุณุชูู ุงูุฃุนูู
  }
};

// Export the database connection and models
module.exports = {
  ...db,
  syncModels,
  sequelize,
  Sequelize
};
